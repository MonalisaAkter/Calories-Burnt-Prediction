# -*- coding: utf-8 -*-
"""Calorie Burn Prediction 445.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18lH-oFLY3vJeCpZE1RK0ePh6zcz0RL06
"""

import numpy as np  #used to make array
import pandas as pd #used to make dataframe
import matplotlib.pyplot as plt #plots and graphs
import seaborn as sns #data visualisation
from sklearn.model_selection import train_test_split #splits train-test
from xgboost import XGBRegressor
from sklearn import metrics #evaluate model

"""importing the dependencies

"""

#loading data from csv to pandas
calories = pd.read_csv('/content/calories.csv')

#print the first 5 rows of the dataframe
calories.head()

"""data collection and processing"""

exercise_data = pd.read_csv('/content/exercise.csv')

exercise_data.head()

"""combining two dataframes

"""

calories_data = pd.concat([exercise_data,calories['Calories']],axis=1)

calories_data.head()

#checking number of rows and columns
calories_data.shape

#getting information about data
calories_data.info(

)

#checking for missing values
calories_data.isnull().sum()

"""data analysis"""

#get statistical measures from data
calories_data.describe()

"""data analysis

data visualization
"""

calories_data.replace({"Gender":{'male':0 ,'female':1}}, inplace=True)

sns.set( )

"""Converting text data to neumerical value"""

#plotting the gender column in count plot

sns.countplot( calories_data['Gender'])

#finding the distribution of age column
sns.distplot(calories_data['Age'])

#finding distribution of "height " column

sns.distplot(calories_data['Height'])

# plotting for weight column

sns.distplot(calories_data['Weight'])

#heart rate plotting
sns.distplot(calories_data['Heart_Rate'])

# plotting for duration

sns.distplot(calories_data['Duration'])

#plotting for body temparature

sns.distplot(calories_data['Body_Temp'])

#plotting for calories

sns.distplot(calories_data['Calories'])

"""1.positive correlation
2.negative correlation
"""

#finding correlation between dataset
correlation = calories_data.corr()

#constructing A HEAT map to understand correlation

plt.figure(figsize=(15,15))
sns.heatmap(correlation, cbar= True, square=True, fmt='.1f', annot= True, annot_kws={'size':8}, cmap='Blues')

"""seperating features and target"""

X= calories_data.drop(columns=['User_ID','Calories'],axis=1 )
Y= calories_data['Calories']

print(X)

print(Y)

"""Splitting Train and Test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""XGboost Regressor"""

#loading model

model = XGBRegressor()

# trainning the model with x_train
model.fit(X_train,Y_train)

"""Evaluation

prediction on test data
"""

test_data_prediction=model.predict(X_test)

print(test_data_prediction)

"""Mean Absoloute Error"""

mae = metrics.mean_absolute_error(Y_test,test_data_prediction)

print("Mean Absoloute Error= ",mae)

"""# New Section"""

